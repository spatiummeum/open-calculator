{"version":3,"names":["mockDOM","elements","getElementById","id","value","textContent","style","display","checked","addEventListener","focus","global","document","formatCurrency","showError","hideError","require","describe","test","invalidValues","forEach","result","isNaN","parseFloat","expect","toBe","Infinity","validValues","testCases","expected","decimals","split","length","undefined","checkboxStates","state","emptyProductList","validProductList","isHalf","mockErrorAlert","mockErrorMessage","beforeEach","jest","fn","testMessage","message","expectedErrorMessages","invalidProductValue","invalidDecimals","invalidInvoiceTotal","invalidInvoiceDecimals","noProducts","Object","values","toBeGreaterThan","testProduct","validations","toString","allValid","every","validation","testData","invoiceTotal","products","p"],"sources":["validation.test.js"],"sourcesContent":["/**\n * TESTS DE VALIDACIÓN DE ENTRADA\n * Pruebas para verificar que la validación de datos funciona correctamente\n */\n\n// Mock DOM elements para testing\nconst mockDOM = {\n  elements: {},\n  getElementById: function(id) {\n    if (!this.elements[id]) {\n      this.elements[id] = {\n        value: '',\n        textContent: '',\n        style: { display: 'block' },\n        checked: false,\n        addEventListener: function() {},\n        focus: function() {}\n      };\n    }\n    return this.elements[id];\n  }\n};\n\n// Mock de document global\nglobal.document = mockDOM;\n\n// Importar funciones desde main.js (simulación)\nconst { formatCurrency, showError, hideError } = require('../js/main.js');\n\ndescribe('Validación de Entrada de Datos', () => {\n  \n  describe('Validación de Valores de Producto', () => {\n    \n    test('Debe rechazar valores no numéricos', () => {\n      const invalidValues = ['abc', '', 'null', 'undefined', 'NaN'];\n      \n      invalidValues.forEach(value => {\n        const result = isNaN(parseFloat(value));\n        expect(result).toBe(true);\n      });\n    });\n    \n    test('Debe rechazar valores negativos o cero', () => {\n      const invalidValues = [-1, -100, 0, -0.01];\n      \n      invalidValues.forEach(value => {\n        const result = value <= 0;\n        expect(result).toBe(true);\n      });\n    });\n    \n    test('Debe rechazar valores excesivamente grandes', () => {\n      const invalidValues = [1000000001, 9999999999, Infinity];\n      \n      invalidValues.forEach(value => {\n        const result = value > 1000000000;\n        expect(result).toBe(true);\n      });\n    });\n    \n    test('Debe aceptar valores válidos', () => {\n      const validValues = [1, 100, 1000, 50000.50, 999999999];\n      \n      validValues.forEach(value => {\n        const result = !isNaN(value) && value > 0 && value <= 1000000000;\n        expect(result).toBe(true);\n      });\n    });\n    \n    test('Debe validar decimales (máximo 2 decimales)', () => {\n      const testCases = [\n        { value: '10.50', expected: true },\n        { value: '10.5', expected: true },\n        { value: '10', expected: true },\n        { value: '10.123', expected: false },\n        { value: '10.1234', expected: false }\n      ];\n      \n      testCases.forEach(({ value, expected }) => {\n        const decimals = (value.split('.')[1] || []).length;\n        const result = decimals <= 2;\n        expect(result).toBe(expected);\n      });\n    });\n  });\n  \n  describe('Validación de Monto Total de Factura', () => {\n    \n    test('Debe rechazar valores no numéricos', () => {\n      const invalidValues = ['texto', '', null, undefined];\n      \n      invalidValues.forEach(value => {\n        const result = isNaN(parseFloat(value));\n        expect(result).toBe(true);\n      });\n    });\n    \n    test('Debe rechazar valores fuera del rango permitido', () => {\n      const invalidValues = [0, -1, 10000000001];\n      \n      invalidValues.forEach(value => {\n        const result = value <= 0 || value > 10000000000;\n        expect(result).toBe(true);\n      });\n    });\n    \n    test('Debe aceptar valores válidos de factura', () => {\n      const validValues = [1, 1000, 100000, 5000000.50, 10000000000];\n      \n      validValues.forEach(value => {\n        const result = !isNaN(value) && value > 0 && value <= 10000000000;\n        expect(result).toBe(true);\n      });\n    });\n  });\n  \n  describe('Validación de Checkbox \"Unidades\"', () => {\n    \n    test('Debe manejar correctamente el estado del checkbox', () => {\n      const checkboxStates = [true, false];\n      \n      checkboxStates.forEach(state => {\n        expect(typeof state).toBe('boolean');\n      });\n    });\n  });\n  \n  describe('Validación de Lista de Productos', () => {\n    \n    test('Debe rechazar lista vacía para cálculo', () => {\n      const emptyProductList = [];\n      const result = emptyProductList.length === 0;\n      expect(result).toBe(true);\n    });\n    \n    test('Debe aceptar lista con productos válidos', () => {\n      const validProductList = [\n        { value: 1000, isHalf: false },\n        { value: 2000, isHalf: true }\n      ];\n      const result = validProductList.length > 0;\n      expect(result).toBe(true);\n    });\n  });\n});\n\ndescribe('Funciones de Manejo de Errores', () => {\n  \n  let mockErrorAlert, mockErrorMessage;\n  \n  beforeEach(() => {\n    mockErrorAlert = { style: { display: 'none' } };\n    mockErrorMessage = { textContent: '' };\n    \n    global.document.getElementById = jest.fn((id) => {\n      if (id === 'error-alert') return mockErrorAlert;\n      if (id === 'error-message') return mockErrorMessage;\n      return null;\n    });\n  });\n  \n  test('showError debe mostrar mensaje de error', () => {\n    const testMessage = 'Error de prueba';\n    \n    // Simular función showError\n    const showError = (message) => {\n      mockErrorMessage.textContent = message;\n      mockErrorAlert.style.display = 'block';\n    };\n    \n    showError(testMessage);\n    \n    expect(mockErrorMessage.textContent).toBe(testMessage);\n    expect(mockErrorAlert.style.display).toBe('block');\n  });\n  \n  test('hideError debe ocultar mensaje de error', () => {\n    // Simular función hideError\n    const hideError = () => {\n      mockErrorAlert.style.display = 'none';\n    };\n    \n    hideError();\n    \n    expect(mockErrorAlert.style.display).toBe('none');\n  });\n});\n\ndescribe('Mensajes de Error Específicos', () => {\n  \n  const expectedErrorMessages = {\n    invalidProductValue: 'Por favor, ingrese un valor de producto válido entre 1 y 1.000.000.000.',\n    invalidDecimals: 'Por favor, ingrese un valor con máximo 2 decimales.',\n    invalidInvoiceTotal: 'Por favor, ingrese un monto de factura válido entre 1 y 10.000.000.000.',\n    invalidInvoiceDecimals: 'El monto de la factura debe tener máximo 2 decimales.',\n    noProducts: 'Por favor, añada al menos un producto para descontar.'\n  };\n  \n  test('Debe generar mensajes de error correctos', () => {\n    Object.values(expectedErrorMessages).forEach(message => {\n      expect(typeof message).toBe('string');\n      expect(message.length).toBeGreaterThan(0);\n    });\n  });\n});\n\n// Casos de prueba de integración\ndescribe('Integración de Validación', () => {\n  \n  test('Debe validar flujo completo de agregado de producto', () => {\n    const testProduct = {\n      value: 1000.50,\n      isHalf: false\n    };\n    \n    // Validaciones que deben pasar\n    const validations = [\n      !isNaN(testProduct.value),\n      testProduct.value > 0,\n      testProduct.value <= 1000000000,\n      (testProduct.value.toString().split('.')[1] || []).length <= 2,\n      typeof testProduct.isHalf === 'boolean'\n    ];\n    \n    const allValid = validations.every(validation => validation === true);\n    expect(allValid).toBe(true);\n  });\n  \n  test('Debe validar flujo completo de cálculo', () => {\n    const testData = {\n      invoiceTotal: 100000,\n      products: [\n        { value: 1000, isHalf: false },\n        { value: 2000, isHalf: true }\n      ]\n    };\n    \n    // Validaciones que deben pasar\n    const validations = [\n      !isNaN(testData.invoiceTotal),\n      testData.invoiceTotal > 0,\n      testData.invoiceTotal <= 10000000000,\n      testData.products.length > 0,\n      testData.products.every(p => !isNaN(p.value) && p.value > 0)\n    ];\n    \n    const allValid = validations.every(validation => validation === true);\n    expect(allValid).toBe(true);\n  });\n});"],"mappings":"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","ignoreList":[]}